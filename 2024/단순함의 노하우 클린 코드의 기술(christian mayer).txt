▶리뷰
프로젝트를 진행하다 코드를 이렇게 짜는 게 맞냐는 의구심이 들었다. 클린 코드라는 걸 알고는 있었지만 프로젝트를 진행하며 필요성을 더 느꼈다. 일단 가볍게 검색하며 프로젝트를 진행하였는데 확신이 없으니, 시간이 지난 지금 리팩토링 하고 싶어졌다. 단순히 구글링하기 보다 책으로 깊이 있는 지식을 얻고 싶어 책을 읽게 되었다. 로버트 C. 마틴의 클린 코드를 읽을까 하다가 클린 코드의 기술이 초보인 내가 읽기 좋아 보였다.

전반적으로 복잡성의 문제를 말하고 있으며 문제를 해결하기 위해서는 단순화해서 이에 집중해야 한다고 말한다. 파레토 법칙을 언급하며 중요한 소수를 위해 덜 중요한 다수를 과감히 버리라고 한다. 그렇지 않으면 사소한 다수에 휩쓸린다고 말한다.

실제 클린 코드 작성법은 새로운 내용은 없었다. 기존에 알고 있던 지식이 대부분이었다. 
외부 라이브러리, 오픈 소스 활용, 의미 있는 이름과 명확한 주석, 단일 원칙, 의존 최소화, 캐시, 테스트 활용.
이 모든 내용은 성급하게 하면 안 되며 명확한 기준을 가지고 행해야 한다. 특히 알고리즘 변경이나 도입은 업데이트 비용보다 이득 비용이 더 커야한다. 유명하고 효율적 방법이라도 그 방법을 사용할 만큼 복잡하지 않으면 굳이 사용할 필요 없다.

이외는 집중에 대해 많이 이야기한다. 책에서 언급한 클린 코드법이 일맥 상 집중으로 정리가 되긴 한다. 더불어 몰입 중요성에 대해도 많이 말하기에 개발 자세에 대한 자기계발서 느낌이 강했다.

나 같은 초보자에게 읽기 좋은 책이다. 새로운 내용을 알기보다는 기존의 지식을 정리할 수 있는 책이라고 생각하면 되겠다. 이 책을 읽고 느낀 점은 알던 내용이나 잘 활용하자!


▶기억하고 싶은 내용
- 집중하지 않으면 여러 개의 파레토 분포에 참여하게 된다
- 스텔스 모드: 잠재적 사용자들로부터 어떠한 피드백도 구하지 않고 프로젝트를 수행
- 무수한 요소들이 계획된 프로젝트 기간을 증가시키고 줄어들 요소는 거의 없다
- 어떤 소프트웨어 프로젝트의 가장 높은 결과는 침묵
- 현실의 시장에서 MVP를 시험하고 그것이 통하면 두 번째 MVP 생성
- 소프트웨어 개발은 단지 제품 창조와 가치 전달 과정의 한 단계
- 코드 복잡도 플로그인 활용
- DOTADIW(Do One Thing And Do It Well)


▶추가 공부하고 싶은 내용 
마이크로서비스 아키텍처
(참고 사이트:https://www.redhat.com/ko/topics/microservices/what-are-microservices)